"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[881],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return p}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),p=r,h=d["".concat(l,".").concat(p)]||d[p]||m[p]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function p(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3890:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return c},default:function(){return d}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:2},l="Overview",u={unversionedId:"getting-started/system-overview",id:"getting-started/system-overview",title:"Overview",description:"The quadcopter project's subsystems can be divided into three main systems.",source:"@site/docs/getting-started/system-overview.md",sourceDirName:"getting-started",slug:"/getting-started/system-overview",permalink:"/docs/getting-started/system-overview",editUrl:"https://github.com/quadcopter-ar/QuadcopterAR-Documentation/tree/master/docs/getting-started/system-overview.md",tags:[],version:"current",lastUpdatedBy:"Vybhav",lastUpdatedAt:1645345546,formattedLastUpdatedAt:"2/20/2022",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Welcome",permalink:"/docs/getting-started/welcome"},next:{title:"How to get started building your own game",permalink:"/docs/getting-started/build-your-first-game"}},c=[{value:"Game System",id:"game-system",children:[{value:"Prefabs",id:"prefabs",children:[],level:3},{value:"Unity XR",id:"unity-xr",children:[],level:3},{value:"Networking and Multiplayer",id:"networking-and-multiplayer",children:[],level:3}],level:2},{value:"Drone System",id:"drone-system",children:[],level:2},{value:"Drone to Game communication subsystem",id:"drone-to-game",children:[],level:2}],m={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"overview"},"Overview"),(0,o.kt)("p",null,"The quadcopter project's subsystems can be divided into three main systems."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("a",{parentName:"li",href:"#game-system"},"Game built on Unity")," and,"),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("a",{parentName:"li",href:"#drone-system"},"Drone System")),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("a",{parentName:"li",href:"#drone-to-game"},"Drone <-> Game")," connection subsystem")),(0,o.kt)("h2",{id:"game-system"},"Game System"),(0,o.kt)("p",null,"All the games are built on the Unity Game engine. You are going to have to have the Unity Game engine installed.\nThe 2020 LTS, as of this writing it is set to be ",(0,o.kt)("a",{parentName:"p",href:"unityhub://2020.3.29f1/2ff179115da0"},"2020.3.29"),", version should work\nfor our use case."),(0,o.kt)("p",null,"To use the above link, make sure the Unity Hub application is installed. If you cannot develop on your own machine\nplease let someone know so we can give you access to the lab computers to work remotely."),(0,o.kt)("h3",{id:"prefabs"},"Prefabs"),(0,o.kt)("p",null,"The main idea is to first understand the idea of what a ",(0,o.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/Manual/Prefabs.html"},"Prefab")," is in\nUnity.  In essence, a prefab is a modular component that can be used across projects to create a cohesive expereince.\nIdeally we would want the prefabs to be a self hosted Unity Package that we could install onto our games. However,\nthe current functionality relies on having pre-written scripts and models that can be extended."),(0,o.kt)("p",null,"The current system focuses on packaging the important sub-systems used across games to easily extensible Prefabs.\nOur prefabs can be found at the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/quadcopter-ar/Quadcopter-Prefabs"},"Quadcopter-Prefab")," repository."),(0,o.kt)("h3",{id:"unity-xr"},"Unity XR"),(0,o.kt)("p",null,"The way we employ the use of Virtual Reality in our games is to use the\n",(0,o.kt)("a",{parentName:"p",href:"https://docs.unity3d.com/Manual/XR.html"},"Unity XR System"),"."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"We follow the Unity XR implementation due to the fact that Oculus' VR package in Unity does not support the same\nfeature parity as XR supports."))),(0,o.kt)("p",null,"To add, we use a very specific\nversion of the Unity VR system to enable access without the need to have the hedset plugged in.\nThis is taken care for you in the Template Repository."),(0,o.kt)("p",null,"Some useful places to learn more about Unity XR apart from the documentation are listen below:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=ndwJHpxd9Mo&list=PLmc6GPFDyfw90Xo_T69Va6kw07qJ8nLz7"},"VR with Andrew")," has some exceptional tutorials on how to use the Unity XR interaction toolkit"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=Hnoad3DM_pA"},"Dilmer Valecillos")," has a wonderful video on the setup for Unity XR (This has been done for you if you use the template)")),(0,o.kt)("h3",{id:"networking-and-multiplayer"},"Networking and Multiplayer"),(0,o.kt)("p",null,"For networking multiple games together we use the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/vis2k/Mirror"},"Mirror")," Unity package. The Mirror package is a high level networking package that supports making multiplaying games easier."),(0,o.kt)("p",null,"Our games use a simple, client server protocol. However, with Mirror, the first player who loads into the game is considered as the host of the game. And therefore Player One is considered the host."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("h4",{parentName:"div",id:"pun-vs-mirror"},"PUN vs Mirror"),(0,o.kt)("p",{parentName:"div"},"Previously we had worked on using the PUN networking engine. The reason we switched was due to the need to have an\nactive internet connection when working with the PUN networking engine."))),(0,o.kt)("p",null,"A great resource to start understanding Mirror is the ",(0,o.kt)("a",{parentName:"p",href:"https://mirror-networking.gitbook.io/docs/"},"Mirror Docs")," and ",(0,o.kt)("a",{parentName:"p",href:"https://www.youtube.com/watch?v=8VVgIjWBXks"},"Shrine")," on YouTube. This documentation will not go into the description of how Mirror works.\nWe really reccommend watching and reading these resources before getting started."),(0,o.kt)("h2",{id:"drone-system"},"Drone System"),(0,o.kt)("p",null,"The quadcopter unit includes the quadcopter itself, a Nvidia Jetson Nano, a Zed camera, an Intel Real Sense Camera and, a battery pack. All of these together form the quadcopter unit."),(0,o.kt)("p",null,"The Jetson nano is a single board computer, much like a raspberry pi. It is, in a way, the brains of the [","[Drone Connection subsystem]","]."),(0,o.kt)("p",null,"We have two camera systems on board. The zed camera is responsible to send video data to the game to be displayed. The Real sense camera is setup to give us accurate mapping system to understand how the world looks around us."),(0,o.kt)("p",null,"The current project uses two 3DR Solo Drones. The drones communicate to a remote control unit through their own communication protocol. The wireless controllers give access to a wifi network, usually called ",(0,o.kt)("inlineCode",{parentName:"p"},"xxx_Sololink"),".  Any and all communication comes into the quadcopter through this wireless signal."),(0,o.kt)("h2",{id:"drone-to-game"},"Drone to Game communication subsystem"),(0,o.kt)("p",null,"The drone system consists of two main sub systems."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The connection script from the game to the drone"),(0,o.kt)("li",{parentName:"ol"},"The connection scripts on the drone and the video transmission setup")))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[796],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return m}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(a),m=r,p=d["".concat(l,".").concat(m)]||d[m]||h[m]||o;return a?n.createElement(p,i(i({ref:t},u),{},{components:a})):n.createElement(p,i({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},6833:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},assets:function(){return u},toc:function(){return h},default:function(){return m}});var n=a(7462),r=a(3366),o=(a(7294),a(3905)),i=["components"],s={sidebar_position:2,title:"Quadcopter Maze"},l="[Quadcopter Maze Game](https://github.com/quadcopter-ar/Quadcopter-Maze)",c={unversionedId:"game-specific-documentation/quadcopter-maze",id:"game-specific-documentation/quadcopter-maze",title:"Quadcopter Maze",description:"The Maze Game is currently setup as a very basic game with the Wilson Maze generation algorithm. This lets us generate",source:"@site/docs/game-specific-documentation/quadcopter-maze.md",sourceDirName:"game-specific-documentation",slug:"/game-specific-documentation/quadcopter-maze",permalink:"/docs/game-specific-documentation/quadcopter-maze",editUrl:"https://github.com/quadcopter-ar/QuadcopterAR-Documentation/tree/master/docs/game-specific-documentation/quadcopter-maze.md",tags:[],version:"current",lastUpdatedBy:"Conar Abramson-Davis",lastUpdatedAt:1675931438,formattedLastUpdatedAt:"2/9/2023",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Quadcopter Maze"},sidebar:"tutorialSidebar",previous:{title:"Quadcopter Pong",permalink:"/docs/game-specific-documentation/quadcopter-pong"},next:{title:"Quadcopter Shooting",permalink:"/docs/game-specific-documentation/quadcopter-shooting"}},u={},h=[{value:"Maze Generation",id:"maze-generation",children:[{value:"2D vs 3D Maze",id:"2d-vs-3d-maze",children:[],level:3}],level:2},{value:"How to run the game",id:"how-to-run-the-game",children:[],level:2},{value:"Libraries used in this game",id:"libraries-used-in-this-game",children:[{value:"Mirror: used for networking",id:"mirror-used-for-networking",children:[],level:3},{value:"ParrelSync: used to make debugging networking easier",id:"parrelsync-used-to-make-debugging-networking-easier",children:[],level:3}],level:2}],d={toc:h};function m(e){var t=e.components,a=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"quadcopter-maze-game"},(0,o.kt)("a",{parentName:"h1",href:"https://github.com/quadcopter-ar/Quadcopter-Maze"},"Quadcopter Maze Game")),(0,o.kt)("p",null,"The Maze Game is currently setup as a very basic game with the Wilson Maze generation algorithm. This lets us generate\nnew mazes every time the game starts."),(0,o.kt)("p",null,"The game uses ",(0,o.kt)("a",{parentName:"p",href:"../getting-started/system-overview/game-system#networking-and-multiplayer"},"Mirror")," to build the networking system for the game."),(0,o.kt)("h2",{id:"maze-generation"},"Maze Generation"),(0,o.kt)("p",null,"The game is built on the Wilson\u2019s Algorithm to generate Mazes. Each maze is a bunch of Wall objects.\nThere\u2019s a Cell class that keeps track of which walls of a cell are there and which aren\u2019t"),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"There are no double walls (i.e. two adjacent cells share a single wall object; they don\u2019t each have their own)"))),(0,o.kt)("p",null,"All the variables in the code should be straightforward, except for wallSize, wallSize should be set to the length\nof the actual Wall object (though it\u2019s better to have the Wall object be slightly bigger so the corners of the\nmaze don\u2019t look awkward). In essence, it lets you adjust the width of the corridors in the maze."),(0,o.kt)("p",null,"The size variables are automatically validated to be odd and the hole rows/cols are validated to be less than maze rows/cols (this is in the Validate method)"),(0,o.kt)("h3",{id:"2d-vs-3d-maze"},"2D vs 3D Maze"),(0,o.kt)("p",null,"To change the maze generation to 2D or 3D, go into the \u201cMaze\u201d Scene, go into the \u201cMaze\u201d object in that scene, and enable the appropriate script (HoleMaze or HoleMaze3D)\nYou should enable either, not both"),(0,o.kt)("h2",{id:"how-to-run-the-game"},"How to run the game"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Follow the instructions on how to ",(0,o.kt)("a",{parentName:"li",href:"../guides/connecting-drone-to-game"},"connect the drone to the game")),(0,o.kt)("li",{parentName:"ol"},"Navigate to the \u201cOfflineScene\u201d scene"),(0,o.kt)("li",{parentName:"ol"},"Click start"),(0,o.kt)("li",{parentName:"ol"},"Click on \u201cHost\u201d button in the hud (top left) to host a game (and \u201cClient\u201d, on localhost, to join the game with another user)")),(0,o.kt)("p",null,"You should now see the generated maze."),(0,o.kt)("h2",{id:"libraries-used-in-this-game"},"Libraries used in this game"),(0,o.kt)("p",null,"This game uses two libraries besides the XR one:"),(0,o.kt)("h3",{id:"mirror-used-for-networking"},(0,o.kt)("a",{parentName:"h3",href:"../getting-started/system-overview/game-system#networking-and-multiplayer"},"Mirror"),": used for networking"),(0,o.kt)("p",null,"Here are specifics regarding the Maze game"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The main object is the network manager"),(0,o.kt)("li",{parentName:"ul"},"Located in the offline scene but it has DontDestroyOnLoad so it persists between scenes"),(0,o.kt)("li",{parentName:"ul"},"It has a custom MyNetworkManager script on it, which simply inherits from the Mirror-provided NetworkManager class in a script."),(0,o.kt)("li",{parentName:"ul"},"It also has the NetworkHUD, which provides the buttons to Host a game or join as a client"),(0,o.kt)("li",{parentName:"ul"},"You can make your own by overriding methods in the MyNetworkManager script."),(0,o.kt)("li",{parentName:"ul"},"Every object which should be networked (in this case just the players, but there might be other objects in the future) must have a NetworkIdentity script on them. It\u2019s what makes them \u201cnetworked\u201d"),(0,o.kt)("li",{parentName:"ul"},"The player objects also have the NetworkTransform component which automatically sync the position, scale, and rotation of the object to all other players"),(0,o.kt)("li",{parentName:"ul"},"The Maze scene has spawn objects which dictate where the players will spawn")),(0,o.kt)("h3",{id:"parrelsync-used-to-make-debugging-networking-easier"},(0,o.kt)("a",{parentName:"h3",href:"../guides/using-parrelsync-for-games"},"ParrelSync"),": used to make debugging networking easier"))}m.isMDXComponent=!0}}]);
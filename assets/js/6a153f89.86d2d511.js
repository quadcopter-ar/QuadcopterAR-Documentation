"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[408],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return u}});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=o.createContext({}),d=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=d(e.components);return o.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=d(n),u=a,h=p["".concat(c,".").concat(u)]||p[u]||l[u]||r;return n?o.createElement(h,i(i({ref:t},m),{},{components:n})):o.createElement(h,i({ref:t},m))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var d=2;d<r;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1409:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return d},assets:function(){return m},toc:function(){return l},default:function(){return u}});var o=n(7462),a=n(3366),r=(n(7294),n(3905)),i=["components"],s={sidebar_position:4,title:"Drone \u21cc  Game"},c="Drone &",d={unversionedId:"getting-started/system-overview/drone-to-game",id:"getting-started/system-overview/drone-to-game",title:"Drone \u21cc  Game",description:"8652; Game communication",source:"@site/docs/getting-started/system-overview/drone-to-game.md",sourceDirName:"getting-started/system-overview",slug:"/getting-started/system-overview/drone-to-game",permalink:"/docs/getting-started/system-overview/drone-to-game",editUrl:"https://github.com/quadcopter-ar/QuadcopterAR-Documentation/tree/master/docs/getting-started/system-overview/drone-to-game.md",tags:[],version:"current",lastUpdatedBy:"BrownTable445",lastUpdatedAt:1701632604,formattedLastUpdatedAt:"12/3/2023",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Drone \u21cc  Game"},sidebar:"tutorialSidebar",previous:{title:"Drone System",permalink:"/docs/getting-started/system-overview/drone-system"},next:{title:"How to get started building your own game",permalink:"/docs/getting-started/build-your-first-game"}},m={},l=[{value:"On the drone side",id:"on-the-drone-side",children:[],level:2},{value:"On the game side",id:"on-the-game-side",children:[],level:2}],p={toc:l};function u(e){var t=e.components,s=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"drone-to-game"},"Drone ","\u21cc"," Game communication"),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"WIP")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The names and usage of the files listed can change. If they have changed please update the following information to have\nthe correct information."))),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"All this information is old. At the current moment we are in development to improve the existing system."))),(0,r.kt)("p",null,"The communication system consists of two main sub systems."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The connection scripts on the drone and the video transmission setup"),(0,r.kt)("li",{parentName:"ul"},"The connection script from the game to the drone")),(0,r.kt)("h2",{id:"on-the-drone-side"},"On the drone side"),(0,r.kt)("p",null,"There are two main scripts that run on the drone. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/quadcopter-ar/QuadcopterAR-Jetson-Nano-Unity-Bridge/blob/main/unity_test.py"},(0,r.kt)("inlineCode",{parentName:"a"},"unity_test.py")),"\nis responsible in handling communication that it receives from unity, for example a player sending an input command,\nand sending these commands to the drone. This script is also responsible to make sure that Unity gets an updated relative positional\ndata from the quadcopter."),(0,r.kt)("p",null,"Since there is no current way to figure out where exactly the drone is, we currently send information from the game\nabout positioning the drone. The drone then responds with orientation and ",(0,r.kt)("em",{parentName:"p"},"relative")," position, from where it started.\nWe use this data to then move the player around in the game world."),(0,r.kt)("p",null,(0,r.kt)("img",{loading:"lazy",alt:"Drone Communicating with game",src:n(9506).Z,width:"403",height:"133"})),(0,r.kt)("hr",null),(0,r.kt)("p",null,"The other is ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/quadcopter-ar/QuadcopterAR-Jetson-Nano-Unity-Bridge/blob/main/client_opencv.py"},(0,r.kt)("inlineCode",{parentName:"a"},"client_opencv.py")),".\nThe role of ",(0,r.kt)("inlineCode",{parentName:"p"},"client_opencv")," is to take any images within the ZED camera and send them over to Unity so that Unity can display\nthe image internally. Rather than the game asking, the drone is always sending up to date video data from its cameras\nto the game."),(0,r.kt)("p",null,(0,r.kt)("img",{loading:"lazy",alt:"Drone sending video to game",src:n(8134).Z,width:"403",height:"133"})),(0,r.kt)("h2",{id:"on-the-game-side"},"On the game side"),(0,r.kt)("p",null,"The game uses ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/quadcopter-ar/Quadcopter-Prefabs/blob/master/Assets/Scripts/Drone%20Connection/DroneConnection.cs"},"DroneConnection.cs"),"\nto communicate with the drone. This script is responsible to take any inputs being made by the game and to send those inputs\nto the drone. The script also keeps track of the Drones' position and orientation. This is then also used to change the\nplayers orientation and position."),(0,r.kt)("p",null,"It is highly suggested you understand this communication system well as this is currently where majority of the work\nis taking place."))}u.isMDXComponent=!0},9506:function(e,t,n){t.Z=n.p+"assets/images/drone_communication-6b02ff08d7dd953c462927c47d0f7455.svg"},8134:function(e,t,n){t.Z=n.p+"assets/images/drone_video_communication-426939811803603e13e17bec29a97330.svg"}}]);